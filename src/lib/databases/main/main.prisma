generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/main.db"
}

model Migration {
  name      String   @id
  appliedAt DateTime @default(now())
}

// ------------------------ USERS ------------------------ //

enum UserRole {
  admin
  user
}

enum Region {
  america
  europe
  asia
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  role      UserRole @default(user)
  name      String?
  region    Region?
  picture   String?

  sessions Session[]
  projects ProjectMember[]
}

model DeletedUser {
  id        String   @id
  createdAt DateTime
  email     String
  role      UserRole
  name      String
  region    Region

  deletedAt DateTime @default(now())
}

// -------------------- AUTHENTICATION -------------------- //

enum AuthenticationMethod {
  code
  token
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model AuthenticationToken {
  id         String                @id @default(uuid())
  createdAt  DateTime              @default(now())
  email      String
  code       String
  token      String
  attempts   Int                   @default(0)
  consumedBy AuthenticationMethod?
}

// ----------------------- PROJECT ----------------------- //

enum ProjectRole {
  owner
  collaborator
}

model Project {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String?

  members    ProjectMember[]
  sources    Datasource[]
  queries    Query[]
  dashboards Dashboard[]
  parameters Parameter[]
}

model ProjectMember {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  userId    String
  projectId String
  role      ProjectRole @default(collaborator)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

// ---------------------- DATASOURCE ---------------------- //

enum DatasourceType {
  postgresql
  mysql
  mongodb
  sqlite
  libsql
  custom
}

model Datasource {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  projectId String
  type      DatasourceType
  name      String
  detail    Json

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// ------------------------ QUERY ------------------------ //

enum QueryType {
  table

  area
  line
  bar
  pie
  arc
  scatter
  dot
  radar
  map
}

model Query {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  projectId    String
  datasourceId String
  name         String
  type         QueryType
  query        String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// ---------------------- DASHBOARD ---------------------- //

model Dashboard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  projectId String
  name      String
  content   Json

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// ---------------------- PARAMETER ---------------------- //

enum ParameterType {
  string
  number
  boolean
  date
  time
  datetime
  json
}

model Parameter {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  projectId    String
  name         String
  type         ParameterType
  defaultValue Json
  detail       Json

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
